
namespace gr {
  namespace testmod {

    square_ff::sptr
    square_ff::make(size_t itemsize)
    {
      return gnuradio::get_initial_sptr (new square_ff_impl(itemsize));
    }

    square_ff_impl::square_ff_impl()
      : gr_block("square_ff",
		 gr_make_io_signature(1, 1, itemsize),
		 gr_make_io_signature(1, gr_io_signature::IO_IFINITE,itemsize),1 )
    {}

    /*
     * Our virtual destructor.
     */
    square_ff_impl::~square_ff_impl()
    {
       // NOP
    }

    bool
    square_ff_impl::check_topology (int ninputs, int noutputs)
    {
          set_decimation (noutputs);
          return true;
    }

int
    square_ff_impl::general_work (int noutput_items,
                                  gr_vector_const_void_star &input_items,
	               	          gr_vector_void_star &output_items)
    {
     size_t nchan = output_items.size ();
     size_t itemsize = d_itemsize;
     const char *in = (const char *) input_items[0];
     char **out = (char **) &output_items[0];

     for (int i = 0; i < noutput_items; i++){
       for (unsigned int n = 0; n < nchan; n++){
         memcpy (out[n], in, itemsize);
         out[n] += itemsize;
         in += itemsize;
       }
     }

  return noutput_items;
  } /* namespace testmod */

} /* namespace gr */

